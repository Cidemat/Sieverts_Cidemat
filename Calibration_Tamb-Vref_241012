{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Cidemat/Sieverts_Cidemat/blob/main/Calibration_Tamb-Vref_241012\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Example of calibration using a known volume"
      ],
      "metadata": {
        "id": "-V2OFm--HJfq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Import common libraries"
      ],
      "metadata": {
        "id": "pYHikPHdHYJ-"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "iqtpXq57X45A",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0c11669a-fcf6-4a5b-aedf-ba6bd8e93496"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.5.2)\n",
            "Requirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.26.4)\n",
            "Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.13.1)\n",
            "Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pylab as plt\n",
        "\n",
        "!pip install -U scikit-learn\n",
        "from sklearn.metrics import r2_score"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Import library to obtain compressibility factor or other thermodynamic properties from an Equation of State (EoS)"
      ],
      "metadata": {
        "id": "d5O2tOwi2lqx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install CoolProp\n",
        "import CoolProp.CoolProp as CP"
      ],
      "metadata": {
        "id": "MB-O8zJLMeI3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "169e3327-b45b-4471-b58c-61da4ae4b677"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: CoolProp in /usr/local/lib/python3.10/dist-packages (6.6.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "  Read pressure sensor data from a CSV file hosted in a public GitHub repository and store it in the objects `Pf` (Final Pressure) and `Pi` (Initial Pressure)"
      ],
      "metadata": {
        "id": "x0MuevXB3bjd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "urlWKV = ('https://raw.githubusercontent.com/Cidemat/Sieverts_Cidemat/refs/heads/main/241012WC_BT.csv')\n",
        "urlSV = ('https://raw.githubusercontent.com/Cidemat/Sieverts_Cidemat/refs/heads/main/241012WS_BT.csv')\n",
        "dfWKV = pd.read_csv(urlWKV) # data frame for the measurements with known volume\n",
        "dfSV = pd.read_csv(urlSV) #data frame for the  system volume mesurements\n",
        "print(dfWKV.head())\n",
        "print(dfSV.head())"
      ],
      "metadata": {
        "id": "HYRWsjTZwnv4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f0855992-5fa5-40cc-8984-18a60d748826"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     Tref    Tana  Pi_Vref  Peq_Vtotal  Pi_Vana\n",
            "0  303.15  303.15   0.5103     0.49218   0.0044\n",
            "1  303.15  303.15   1.0108     0.97430   0.0044\n",
            "2  303.15  303.15   1.4632     1.40980   0.0044\n",
            "3  303.15  303.15   2.0582     1.98140   0.0044\n",
            "4  303.15  323.15   0.5116     0.49400   0.0044\n",
            "     Tref    Tana  Pi_Vref  Peq_Vtotal  Pi_Vana\n",
            "0  303.15  303.15   0.4270      0.4117   0.0045\n",
            "1  303.15  303.15   0.9319      0.8983   0.0045\n",
            "2  303.15  303.15   1.4965      1.4413   0.0045\n",
            "3  303.15  303.15   2.0085      1.9329   0.0045\n",
            "4  303.15  323.15   0.5014      0.4839   0.0045\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Describe the known volume"
      ],
      "metadata": {
        "id": "WU2uQp4BUdLM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "n = 3 # number of elements (3 spheres)\n",
        "r = 0.4543/2 # sphere diameter cm\n",
        "Vesf = 4/3*np.pi*r**3\n",
        "Vk = 3*Vesf # Known volume\n",
        "Vk # cm3"
      ],
      "metadata": {
        "id": "_mqzFfIEUmF6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9da6a668-3294-47a5-e95b-ec628eeabd3b"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.14728146230566974"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Calculate compresibility factors"
      ],
      "metadata": {
        "id": "OkLPVDtAYTK4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dfZSV = pd.DataFrame(index=range(len(dfSV)),columns=['Zi_ref','Zeq_ref', 'Zeq_ana',\t'Zi_ana'])\n",
        "dfZWKV = pd.DataFrame(index=range(len(dfWKV)),columns=['Zi_ref','Zeq_ref', 'Zeq_ana',\t'Zi_ana'])\n",
        "\n",
        "for i in range(0,len(dfWKV)):\n",
        "  dfZSV.Zi_ref[i] = (CP.PropsSI('Z', 'T', dfSV.Tref[i] , 'P', dfSV.Pi_Vref[i]*1e6, 'Hydrogen'))\n",
        "  dfZSV.Zeq_ref[i] = (CP.PropsSI('Z', 'T', dfSV.Tref[i] , 'P', dfSV.Peq_Vtotal[i]*1e6, 'Hydrogen'))\n",
        "  dfZSV.Zeq_ana[i] = (CP.PropsSI('Z', 'T', dfSV.Tana[i] , 'P', dfSV.Peq_Vtotal[i]*1e6, 'Hydrogen'))\n",
        "  dfZSV.Zi_ana[i] = (CP.PropsSI('Z', 'T', dfSV.Tana[i] , 'P', dfSV.Pi_Vana[i]*1e6, 'Hydrogen'))\n",
        "\n",
        "  dfZWKV.Zi_ref[i] = (CP.PropsSI('Z', 'T', dfWKV.Tref[i] , 'P', dfWKV.Pi_Vref[i]*1e6, 'Hydrogen'))\n",
        "  dfZWKV.Zeq_ref[i] = (CP.PropsSI('Z', 'T', dfWKV.Tref[i] , 'P', dfWKV.Peq_Vtotal[i]*1e6, 'Hydrogen'))\n",
        "  dfZWKV.Zeq_ana[i] = (CP.PropsSI('Z', 'T', dfWKV.Tana[i] , 'P', dfWKV.Peq_Vtotal[i]*1e6, 'Hydrogen'))\n",
        "  dfZWKV.Zi_ana[i] = (CP.PropsSI('Z', 'T', dfWKV.Tana[i] , 'P', dfWKV.Pi_Vana[i]*1e6, 'Hydrogen'))"
      ],
      "metadata": {
        "id": "1Z8tGvj9Y0II",
        "collapsed": true,
        "outputId": "68b302a6-40b9-44b2-fdcd-a27647509126",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-20-2930bbd5605c>:5: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
            "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
            "A typical example is when you are setting values in a column of a DataFrame, like:\n",
            "\n",
            "df[\"col\"][row_indexer] = value\n",
            "\n",
            "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n",
            "  dfZSV.Zi_ref[i] = (CP.PropsSI('Z', 'T', dfSV.Tref[i] , 'P', dfSV.Pi_Vref[i]*1e6, 'Hydrogen'))\n",
            "<ipython-input-20-2930bbd5605c>:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
            "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
            "A typical example is when you are setting values in a column of a DataFrame, like:\n",
            "\n",
            "df[\"col\"][row_indexer] = value\n",
            "\n",
            "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n",
            "  dfZSV.Zeq_ref[i] = (CP.PropsSI('Z', 'T', dfSV.Tref[i] , 'P', dfSV.Peq_Vtotal[i]*1e6, 'Hydrogen'))\n",
            "<ipython-input-20-2930bbd5605c>:7: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
            "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
            "A typical example is when you are setting values in a column of a DataFrame, like:\n",
            "\n",
            "df[\"col\"][row_indexer] = value\n",
            "\n",
            "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n",
            "  dfZSV.Zeq_ana[i] = (CP.PropsSI('Z', 'T', dfSV.Tana[i] , 'P', dfSV.Peq_Vtotal[i]*1e6, 'Hydrogen'))\n",
            "<ipython-input-20-2930bbd5605c>:8: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
            "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
            "A typical example is when you are setting values in a column of a DataFrame, like:\n",
            "\n",
            "df[\"col\"][row_indexer] = value\n",
            "\n",
            "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n",
            "  dfZSV.Zi_ana[i] = (CP.PropsSI('Z', 'T', dfSV.Tana[i] , 'P', dfSV.Pi_Vana[i]*1e6, 'Hydrogen'))\n",
            "<ipython-input-20-2930bbd5605c>:10: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
            "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
            "A typical example is when you are setting values in a column of a DataFrame, like:\n",
            "\n",
            "df[\"col\"][row_indexer] = value\n",
            "\n",
            "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n",
            "  dfZWKV.Zi_ref[i] = (CP.PropsSI('Z', 'T', dfWKV.Tref[i] , 'P', dfWKV.Pi_Vref[i]*1e6, 'Hydrogen'))\n",
            "<ipython-input-20-2930bbd5605c>:11: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
            "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
            "A typical example is when you are setting values in a column of a DataFrame, like:\n",
            "\n",
            "df[\"col\"][row_indexer] = value\n",
            "\n",
            "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n",
            "  dfZWKV.Zeq_ref[i] = (CP.PropsSI('Z', 'T', dfWKV.Tref[i] , 'P', dfWKV.Peq_Vtotal[i]*1e6, 'Hydrogen'))\n",
            "<ipython-input-20-2930bbd5605c>:12: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
            "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
            "A typical example is when you are setting values in a column of a DataFrame, like:\n",
            "\n",
            "df[\"col\"][row_indexer] = value\n",
            "\n",
            "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n",
            "  dfZWKV.Zeq_ana[i] = (CP.PropsSI('Z', 'T', dfWKV.Tana[i] , 'P', dfWKV.Peq_Vtotal[i]*1e6, 'Hydrogen'))\n",
            "<ipython-input-20-2930bbd5605c>:13: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
            "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
            "A typical example is when you are setting values in a column of a DataFrame, like:\n",
            "\n",
            "df[\"col\"][row_indexer] = value\n",
            "\n",
            "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n",
            "  dfZWKV.Zi_ana[i] = (CP.PropsSI('Z', 'T', dfWKV.Tana[i] , 'P', dfWKV.Pi_Vana[i]*1e6, 'Hydrogen'))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Calculate X and Y vectors"
      ],
      "metadata": {
        "id": "2mpfnlrMpImr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dfXYSV = pd.DataFrame(index=range(len(dfSV)),columns=['X','Y'])\n",
        "dfXYWKV = pd.DataFrame(index=range(len(dfWKV)),columns=['X','Y'])\n",
        "\n",
        "for i in range(0,len(dfWKV)):\n",
        "  dfXYSV.X[i] = ((1/dfSV.Tana[i])*((dfSV.Peq_Vtotal[i]/dfZSV.Zeq_ana[i])-(dfSV.Pi_Vana[i]/dfZSV.Zi_ana[i])))\n",
        "  dfXYSV.Y[i] = ((1/dfSV.Tref[i])*((dfSV.Pi_Vref[i]/dfZSV.Zi_ref[i])-(dfSV.Peq_Vtotal[i]/dfZSV.Zeq_ref[i])))\n",
        "\n",
        "  dfXYWKV.X[i] = ((1/dfWKV.Tana[i])*((dfWKV.Peq_Vtotal[i]/dfZWKV.Zeq_ana[i])-(dfWKV.Pi_Vana[i]/dfZWKV.Zi_ana[i])))\n",
        "  dfXYWKV.Y[i] = ((1/dfWKV.Tref[i])*((dfWKV.Pi_Vref[i]/dfZWKV.Zi_ref[i])-(dfWKV.Peq_Vtotal[i]/dfZWKV.Zeq_ref[i])))\n"
      ],
      "metadata": {
        "id": "EJkDdpkadhi9",
        "outputId": "14dae646-63ea-4169-e9bc-8f7b5cd098b2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-27-e99c23669212>:5: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
            "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
            "A typical example is when you are setting values in a column of a DataFrame, like:\n",
            "\n",
            "df[\"col\"][row_indexer] = value\n",
            "\n",
            "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n",
            "  dfXYSV.X[i] = ((1/dfSV.Tana[i])*((dfSV.Peq_Vtotal[i]/dfZSV.Zeq_ana[i])-(dfSV.Pi_Vana[i]/dfZSV.Zi_ana[i])))\n",
            "<ipython-input-27-e99c23669212>:6: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
            "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
            "A typical example is when you are setting values in a column of a DataFrame, like:\n",
            "\n",
            "df[\"col\"][row_indexer] = value\n",
            "\n",
            "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n",
            "  dfXYSV.Y[i] = ((1/dfSV.Tref[i])*((dfSV.Pi_Vref[i]/dfZSV.Zi_ref[i])-(dfSV.Peq_Vtotal[i]/dfZSV.Zeq_ref[i])))\n",
            "<ipython-input-27-e99c23669212>:8: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
            "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
            "A typical example is when you are setting values in a column of a DataFrame, like:\n",
            "\n",
            "df[\"col\"][row_indexer] = value\n",
            "\n",
            "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n",
            "  dfXYWKV.X[i] = ((1/dfWKV.Tana[i])*((dfWKV.Peq_Vtotal[i]/dfZWKV.Zeq_ana[i])-(dfWKV.Pi_Vana[i]/dfZWKV.Zi_ana[i])))\n",
            "<ipython-input-27-e99c23669212>:9: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
            "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
            "A typical example is when you are setting values in a column of a DataFrame, like:\n",
            "\n",
            "df[\"col\"][row_indexer] = value\n",
            "\n",
            "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "\n",
            "  dfXYWKV.Y[i] = ((1/dfWKV.Tref[i])*((dfWKV.Pi_Vref[i]/dfZWKV.Zi_ref[i])-(dfWKV.Peq_Vtotal[i]/dfZWKV.Zeq_ref[i])))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "calculate K parameters and determinarion coefficients"
      ],
      "metadata": {
        "id": "E44Fbl4ltVfi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "KSV = np.sum(dfXYSV.X*dfXYSV.Y)/np.sum(dfXYSV.X**2)\n",
        "KWSV = np.sum(dfXYWKV.X*dfXYWKV.Y)/np.sum(dfXYWKV.X**2)\n",
        "R2SV = r2_score(dfXYSV.Y,dfXYSV.X*KSV)\n",
        "R2WKV = r2_score(dfXYWKV.Y,dfXYWKV.X*KWSV)"
      ],
      "metadata": {
        "id": "Q9XZNYhL0JPc"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Calculate calibrated refrence volume"
      ],
      "metadata": {
        "id": "VSGzAxJK77G3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Vref = Vk/(KSV-KWSV)\n",
        "Vref # mL"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-OyW6RNg7YHt",
        "outputId": "1d176b91-7449-4f85-bf77-c0eb3591a30b"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "252.3333986221697"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Calculate volume of sample cell"
      ],
      "metadata": {
        "id": "8j3xYobQ8CBm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Vana = Vref * KSV\n",
        "Vana # mL"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bL_QNhg28MGF",
        "outputId": "00043596-fca0-48a0-d151-57e7a64eb2fa"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10.103876352073838"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Show the calibraion figure"
      ],
      "metadata": {
        "id": "rGcFbawirKag"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))  # 1 fila, 2 columnas\n",
        "\n",
        "\n",
        "ax1.set_title('Without Known Volume')\n",
        "ax1.set_xlabel('X * $10^3$')\n",
        "ax1.set_ylabel('Y * $10^4$')\n",
        "ax1.text(0.5, 0.9, f'$R^2$: {R2SV:.2f}', transform=ax1.transAxes)\n",
        "\n",
        "ax2.set_title('With Known Volume')\n",
        "ax2.set_xlabel('X * $10^3$')\n",
        "ax2.set_ylabel('Y * $10^4$')\n",
        "ax2.text(0.5, 0.9, f'$R^2$: {R2WKV:.2f}', transform=ax2.transAxes)\n",
        "\n",
        "ax1.plot(dfXYSV['X']*1000,dfXYSV['Y']*10000,'ro',dfXYSV['X']*1000,dfXYSV['X']*10000*KSV,'k-')\n",
        "ax2.plot(dfXYWKV['X']*1000,dfXYWKV['Y']*10000,'ro', dfXYWKV['X']*1000, dfXYWKV['X']*10000*KWSV, 'k-')\n",
        "\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 415
        },
        "id": "iet6dxFe9SyX",
        "outputId": "4cbc1f90-4e12-4a5e-8418-231c8f55f45c"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "zvHwTenQsoQn"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}